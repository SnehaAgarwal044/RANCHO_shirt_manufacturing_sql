-- TASK 1:
-- üèÜ Find the most sold product by total units sold

SELECT SUM(QUANTITY_SOLD) AS TOTAL_UNITS_SOLD,NAME
FROM PRODUCTS AS P
JOIN SALES AS S
ON P.PRODUCT_ID=S.PRODUCT_ID
GROUP BY NAME
ORDER BY TOTAL_UNITS_SOLD DESC
LIMIT 1;


-- TASK 2:
-- üí∞ Find the total revenue generated on 14th July 2025

SELECT SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE_GENERATED,SALE_DATE
FROM SALES 
WHERE SALE_DATE="2025-07-14";


-- TASK 3:
-- üßë‚Äçüè≠ Identify the department with the highest number of workers

SELECT D.NAME,COUNT(W.NAME) AS NUMBER_OF_WORKERS
FROM DEPARTMENTS AS D
JOIN WORKERS AS W
ON D.DEPT_ID=W.DEPT_ID
GROUP BY D.NAME
ORDER BY NUMBER_OF_WORKERS DESC
LIMIT 1;


-- TASK 4:
-- üí∏ Find the total salary paid to each worker

SELECT SUM(AMOUNT) AS TOTAL_SALARY_PAID,W.NAME
FROM WORKERS AS W
JOIN SALARY_PAYMENTS AS S
ON W.WORKER_ID=S.WORKER_ID
GROUP BY W.WORKER_ID;


-- TASK 5:
-- üí∞ Find the total salary paid per department (monthly basis)

SELECT SUM(S.AMOUNT) AS TOTAL_MONTHLY_SALARY,D.NAME AS DEPARTMENT_NAME
FROM SALARY_PAYMENTS AS S
JOIN WORKERS AS W
JOIN DEPARTMENTS AS D
ON W.WORKER_ID=S.WORKER_ID
GROUP BY D.DEPT_ID;


-- TASK 6:
-- üîù Identify the department with the highest total monthly salary paid

SELECT SUM(S.AMOUNT) AS TOTAL_MONTHLY_SALARY,D.NAME AS DEPARTMENT_NAME
FROM 
  SALARY_PAYMENTS AS S
JOIN
  WORKERS AS W ON W.WORKER_ID=S.WORKER_ID
JOIN 
  DEPARTMENTS AS D ON D.DEPT_ID=W.DEPT_ID
GROUP BY D.DEPT_ID
ORDER BY TOTAL_MONTHLY_SALARY DESC
LIMIT 1;


-- TASK 7:
-- üí∞ Calculate the total factory cost by summing all expenses and salaries paid.

SELECT SUM(AMOUNT) AS TOTAL_FACTORY_COST
FROM(SELECT AMOUNT
       FROM EXPENSES
     UNION ALL
     SELECT AMOUNT
       FROM SALARY_PAYMENTS
) AS COMBINED_COST;


-- TASK 8:
-- üìä Calculate monthly profit by subtracting total factory cost (salaries + expenses) from total monthly revenue generated by sales.

SELECT 
R.MONTH,R.TOTAL_REVENUE,C.TOTAL_COST,(R.TOTAL_REVENUE-C.TOTAL_COST) AS PROFIT
FROM
(
  SELECT 
   SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE,DATE_FORMAT(SALE_DATE,"%Y-%m") AS MONTH
FROM SALES
GROUP BY MONTH 
) AS R
JOIN
(
SELECT DATE_FORMAT(DATE_PAID,'%Y-%m') AS MONTH,SUM(AMOUNT) AS TOTAL_COST
FROM (
     SELECT AMOUNT,(PAYMENT_DATE) AS DATE_PAID FROM SALARY_PAYMENTS
     UNION ALL
     SELECT AMOUNT,EXPENSE_DATE AS DATE_PAID FROM EXPENSES
     ) AS ALL_COST
     GROUP BY MONTH
 ) AS C
 ON R.MONTH=C.MONTH;


-- TASK 9:
-- üîç Identify the least profitable month by calculating monthly revenue minus combined salary and expense cost.

SELECT 
  R.MONTH,
  R.TOTAL_REVENUE,
  C.TOTAL_COST,
  (R.TOTAL_REVENUE - C.TOTAL_COST) AS PROFIT
FROM
  (
    SELECT 
      SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE,
      DATE_FORMAT(SALE_DATE, "%Y-%m") AS MONTH
    FROM SALES
    GROUP BY DATE_FORMAT(SALE_DATE, "%Y-%m")
  ) AS R
JOIN
  (
    SELECT 
      DATE_FORMAT(DATE_PAID, "%Y-%m") AS MONTH,
      SUM(AMOUNT) AS TOTAL_COST
    FROM (
      SELECT AMOUNT,(PAYMENT_DATE) AS DATE_PAID FROM SALARY_PAYMENTS
      UNION ALL
      SELECT AMOUNT, EXPENSE_DATE AS DATE_PAID FROM EXPENSES
    ) AS ALL_COST
    GROUP BY DATE_FORMAT(DATE_PAID, "%Y-%m")
  ) AS C
ON R.MONTH = C.MONTH
ORDER BY PROFIT ASC
LIMIT 1;


-- TASK 10:
-- üîç Find the highest revenue-generating product based on total sales revenue, grouped by product name and price.

SELECT SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE, P.NAME AS PRODUCT_NAME,P.PRICE
FROM PRODUCTS AS P
JOIN SALES AS S
ON P.PRODUCT_ID=S.PRODUCT_ID
GROUP BY P.NAME,P.PRICE
ORDER BY TOTAL_REVENUE DESC
LIMIT 1;


-- TASK 11:
-- üîç Identify the product with the highest number of units sold, to understand top-performing items in terms of quantity sold.

SELECT P.NAME AS PRODUCT_NAME,SUM(QUANTITY_SOLD) AS HIGHEST_NUMBER_OF_UNIT_SOLD
FROM PRODUCTS AS P
JOIN SALES AS S
ON P.PRODUCT_ID=S.PRODUCT_ID
GROUP BY P.NAME
ORDER BY HIGHEST_NUMBER_OF_UNIT_SOLD DESC
LIMIT 1;


-- TASK 12:
-- üìä Find the day with the highest total sales revenue to analyze peak business activity.

SELECT SUM(TOTAL_AMOUNT) AS HIGHEST_SALE_REVENUE, SALE_DATE AS DAY
FROM SALES
GROUP BY DAY
ORDER BY HIGHEST_SALE_REVENUE DESC
LIMIT 1;